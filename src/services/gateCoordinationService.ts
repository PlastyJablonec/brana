import { db } from '../firebase/config';

// Typy pro koordinaci br√°ny
export interface GateUser {
  userId: string;
  userDisplayName: string;
  email: string;
  state: 'IDLE' | 'ACTIVE' | 'RESERVED' | 'AUTO_OPENING';
  timestamp: number;
  sessionId: string; // Jedineƒçn√© ID pro ka≈ædou session u≈æivatele
}

export interface GateCoordination {
  activeUser: GateUser | null;
  reservationQueue: GateUser[];
  gateState: 'CLOSED' | 'OPENING' | 'OPEN' | 'CLOSING' | 'STOPPED';
  lastActivity: number;
  autoOpeningUserId?: string; // ID u≈æivatele, kter√Ω ƒçek√° na automatick√© otev≈ôen√≠
}


class GateCoordinationService {
  private coordinationDoc = db.collection('gate_coordination').doc('current_state');
  private unsubscribe: (() => void) | null = null;
  private currentSessionId: string;
  
  // Event callbacks
  private onStateChange: ((state: GateCoordination) => void) | null = null;
  private onUserConflict: ((conflictInfo: { activeUser: GateUser, currentUser: string }) => void) | null = null;
  private onAutoOpenTrigger: ((userId: string) => void) | null = null;

  constructor() {
    this.currentSessionId = this.generateSessionId();
  }

  private generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  // Inicializace slu≈æby a naslouch√°n√≠ zmƒõn√°m
  async initialize(): Promise<void> {
    try {
      console.log('üö® DEBUG: GateCoordinationService.initialize() START');
      console.log('üö® DEBUG: db object:', db);
      console.log('üö® DEBUG: coordinationDoc:', this.coordinationDoc);
      
      // Vytvo≈ô v√Ωchoz√≠ stav, pokud neexistuje
      console.log('üö® DEBUG: Naƒç√≠t√°m dokument z Firestore...');
      const coordDoc = await this.coordinationDoc.get();
      console.log('üö® DEBUG: Dokument naƒçten, exists:', coordDoc.exists, 'data:', coordDoc.data());
      
      if (!coordDoc.exists) {
        console.log('üö® DEBUG: Dokument neexistuje, vytv√°≈ô√≠m initial state...');
        const initialState: GateCoordination = {
          activeUser: null,
          reservationQueue: [],
          gateState: 'CLOSED',
          lastActivity: Date.now(),
        };
        await this.coordinationDoc.set(initialState);
        console.log('‚úÖ GateCoordinationService: Vytvo≈ôen initial state');
      } else {
        console.log('‚úÖ GateCoordinationService: Dokument u≈æ existuje');
      }

      // Naslouchej zmƒõn√°m v real-time
      console.log('üö® DEBUG: Registruji onSnapshot listener...');
      this.unsubscribe = this.coordinationDoc.onSnapshot((doc: any) => {
        console.log('üîî SNAPSHOT CALLBACK: doc.exists =', doc.exists, 'data =', doc.data());
        if (doc.exists) {
          const state = doc.data() as GateCoordination;
          console.log('üîß GateCoordinationService: State change:', state);
          console.log('üîß ACTIVE USER DETAILS:', state.activeUser ? {
            userId: state.activeUser.userId,
            userDisplayName: state.activeUser.userDisplayName,
            email: state.activeUser.email
          } : 'null');
          if (this.onStateChange) {
            console.log('üîß GateCoordinationService: Vol√°m onStateChange callback');
            this.onStateChange(state);
          } else {
            console.warn('‚ö†Ô∏è GateCoordinationService: onStateChange callback nen√≠ nastaven!');
          }
        } else {
          console.warn('üîß GateCoordinationService: Dokument neexistuje');
        }
      });

      console.log('‚úÖ GateCoordinationService: Inicializov√°no s Firebase v8 API');
    } catch (error) {
      console.error('‚ùå GateCoordinationService: KRITICK√Å CHYBA p≈ôi inicializaci:', error);
      throw error;
    }
  }

  // Ukonƒçen√≠ slu≈æby
  destroy(): void {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
    }
    console.log('üîß GateCoordinationService: Slu≈æba ukonƒçena');
  }

  // Registrace callback funkc√≠
  onCoordinationStateChange(callback: (state: GateCoordination) => void): void {
    this.onStateChange = callback;
  }

  onUserConflictDetected(callback: (conflictInfo: { activeUser: GateUser, currentUser: string }) => void): void {
    this.onUserConflict = callback;
  }

  onAutoOpeningTriggered(callback: (userId: string) => void): void {
    this.onAutoOpenTrigger = callback;
  }

  // Z√≠sk√°n√≠ aktu√°ln√≠ho stavu koordinace
  async getCurrentState(): Promise<GateCoordination | null> {
    try {
      const docSnap = await this.coordinationDoc.get();
      return docSnap.exists ? docSnap.data() as GateCoordination : null;
    } catch (error) {
      console.error('üîß GateCoordinationService: Chyba p≈ôi naƒç√≠t√°n√≠ stavu:', error);
      return null;
    }
  }

  // NOV√Å LOGIKA: Aktivace jen p≈ôi skuteƒçn√©m ovl√°d√°n√≠ br√°ny
  async requestGateControl(userId: string, userDisplayName: string, email: string): Promise<'GRANTED' | 'DENIED' | 'QUEUED'> {
    try {
      const currentState = await this.getCurrentState();
      if (!currentState) return 'DENIED';

      const user: GateUser = {
        userId,
        userDisplayName,
        email,
        state: 'ACTIVE',
        timestamp: Date.now(),
        sessionId: this.currentSessionId
      };

      // NOV√Å LOGIKA: Aktivace JEN kdy≈æ NIKDO aktivnƒõ neovl√°d√°
      // (ne kdy≈æ je jen aplikace otev≈ôen√°)
      if (!currentState.activeUser) {
        const updatedState: GateCoordination = {
          ...currentState,
          activeUser: user,
          lastActivity: Date.now()
        };

        await this.coordinationDoc.set(updatedState);
        console.log('üîß GateCoordinationService: U≈æivatel', userDisplayName, 'zaƒçal ovl√°dat br√°nu');
        return 'GRANTED';
      }

      // Pokud u≈æ nƒõkdo aktivnƒõ ovl√°d√°, ostatn√≠ jdou do fronty
      if (currentState.activeUser.userId !== userId) {
        console.log('üîß GateCoordinationService: U≈æivatel', userDisplayName, 'p≈ôid√°n do fronty - aktivn√≠ je', currentState.activeUser.userDisplayName);
        return 'QUEUED'; // Automaticky se p≈ôid√° do fronty
      }

      // Stejn√Ω u≈æivatel - obnov session (u≈æ ovl√°d√°)
      const updatedState: GateCoordination = {
        ...currentState,
        activeUser: { ...user, sessionId: this.currentSessionId },
        lastActivity: Date.now()
      };
      await this.coordinationDoc.set(updatedState);
      return 'GRANTED';

    } catch (error) {
      console.error('üîß GateCoordinationService: Chyba p≈ôi ≈æ√°dosti o ovl√°d√°n√≠:', error);
      return 'DENIED';
    }
  }

  // Uvolnƒõn√≠ ovl√°d√°n√≠ br√°ny
  async releaseGateControl(userId: string): Promise<void> {
    try {
      const currentState = await this.getCurrentState();
      if (!currentState?.activeUser || currentState.activeUser.userId !== userId) {
        return; // U≈æivatel nen√≠ aktivn√≠
      }

      // Zkontroluj, zda je nƒõkdo v queue
      const nextUser = currentState.reservationQueue[0];
      
      const updatedState: GateCoordination = {
        ...currentState,
        activeUser: nextUser ? { ...nextUser, state: 'ACTIVE' } : null,
        reservationQueue: nextUser ? currentState.reservationQueue.slice(1) : [],
        lastActivity: Date.now()
      };

      await this.coordinationDoc.set(updatedState);
      console.log('üîß GateCoordinationService: U≈æivatel', userId, 'uvolnil ovl√°d√°n√≠');

    } catch (error) {
      console.error('üîß GateCoordinationService: Chyba p≈ôi uvol≈àov√°n√≠ ovl√°d√°n√≠:', error);
    }
  }

  // P≈ôid√°n√≠ rezervace do queue
  async addReservation(userId: string, userDisplayName: string, email: string): Promise<boolean> {
    try {
      const currentState = await this.getCurrentState();
      if (!currentState) return false;

      // Zkontroluj, zda u≈æ nen√≠ v queue
      const existsInQueue = currentState.reservationQueue.some(user => user.userId === userId);
      if (existsInQueue) {
        console.log('üîß GateCoordinationService: U≈æivatel ji≈æ je v queue');
        return true;
      }

      const reservationUser: GateUser = {
        userId,
        userDisplayName,
        email,
        state: 'RESERVED',
        timestamp: Date.now(),
        sessionId: this.currentSessionId
      };

      const updatedState: GateCoordination = {
        ...currentState,
        reservationQueue: [...currentState.reservationQueue, reservationUser],
        lastActivity: Date.now()
      };

      await this.coordinationDoc.set(updatedState);
      console.log('üîß GateCoordinationService: U≈æivatel', userDisplayName, 'p≈ôid√°n do queue');
      return true;

    } catch (error) {
      console.error('üîß GateCoordinationService: Chyba p≈ôi p≈ôid√°v√°n√≠ rezervace:', error);
      return false;
    }
  }

  // Odebr√°n√≠ rezervace z queue
  async removeReservation(userId: string): Promise<void> {
    try {
      const currentState = await this.getCurrentState();
      if (!currentState) return;

      const updatedQueue = currentState.reservationQueue.filter(user => user.userId !== userId);
      
      const updatedState: GateCoordination = {
        ...currentState,
        reservationQueue: updatedQueue,
        lastActivity: Date.now()
      };

      await this.coordinationDoc.set(updatedState);
      console.log('üîß GateCoordinationService: Rezervace u≈æivatele', userId, 'odebr√°na');

    } catch (error) {
      console.error('üîß GateCoordinationService: Chyba p≈ôi odeb√≠r√°n√≠ rezervace:', error);
    }
  }

  // NOV√Å LOGIKA: Aktualizace stavu br√°ny s automatick√Ωm otev≈ôen√≠m
  async updateGateState(newState: 'CLOSED' | 'OPENING' | 'OPEN' | 'CLOSING' | 'STOPPED'): Promise<void> {
    try {
      const currentState = await this.getCurrentState();
      if (!currentState) return;

      // NOV√â: Automatick√© otev≈ôen√≠ p≈ôi "CLOSING" (Zav√≠r√° se...) pokud nƒõkdo ƒçek√°
      if (newState === 'CLOSING' && currentState.reservationQueue.length > 0) {
        console.log('üö™ AUTO-OPEN: Br√°na se zav√≠r√° ale nƒõkdo ƒçek√° - triggering auto open');
        
        // Trigger callback pro automatick√© otev≈ôen√≠
        if (this.onAutoOpenTrigger) {
          const nextUser = currentState.reservationQueue[0];
          this.onAutoOpenTrigger(nextUser.userId);
        }
      }

      // Automatick√© p≈ôed√°n√≠ kontroly p≈ôi zav≈ôen√≠ br√°ny
      if (newState === 'CLOSED' && currentState.gateState !== 'CLOSED' && currentState.reservationQueue.length > 0) {
        const nextUser = currentState.reservationQueue[0];
        
        const updatedState: GateCoordination = {
          ...currentState,
          gateState: newState,
          activeUser: nextUser, // P≈ôedej kontrolu dal≈°√≠mu u≈æivateli
          reservationQueue: currentState.reservationQueue.slice(1), // Odeber z fronty
          lastActivity: Date.now()
        };
        
        await this.coordinationDoc.set(updatedState);
        console.log('üîÑ HANDOVER: Kontrola p≈ôed√°na u≈æivateli', nextUser.userDisplayName);
      } else {
        // Jen aktualizuj stav bez zmƒõny kontroly
        const updatedState: GateCoordination = {
          ...currentState,
          gateState: newState,
          lastActivity: Date.now()
        };

        await this.coordinationDoc.set(updatedState);
      }

    } catch (error) {
      console.error('üîß GateCoordinationService: Chyba p≈ôi aktualizaci stavu br√°ny:', error);
    }
  }

  // HELPER METODY PRO useGateCoordination hook

  // Z√≠sk√°n√≠ pozice u≈æivatele (0 = aktivn√≠, pozitivn√≠ ƒç√≠slo = pozice v queue, -1 = nen√≠ zaregistrovan√Ω)
  getUserPosition(userId: string, state: GateCoordination): number {
    if (state.activeUser?.userId === userId) return 0;
    const queueIndex = state.reservationQueue.findIndex(user => user.userId === userId);
    return queueIndex >= 0 ? queueIndex + 1 : -1;
  }

  // NOV√Å LOGIKA: U≈æivatel je blokov√°n jen kdy≈æ nƒõkdo AKTIVNƒö ovl√°d√° br√°nu
  isUserBlocked(userId: string, state: GateCoordination): boolean {
    // Blokov√°n jen pokud:
    // 1. Nƒõkdo je aktivn√≠ (activeUser existuje)  
    // 2. A nen√≠ to tento u≈æivatel
    return state.activeUser !== null && state.activeUser.userId !== userId;
  }
  
  // Nov√° helper metoda: M≈Ø≈æe u≈æivatel zaƒç√≠t ovl√°dat?
  canUserStartControl(userId: string, state: GateCoordination): boolean {
    // M≈Ø≈æe zaƒç√≠t ovl√°dat kdy≈æ:
    // 1. Nikdo nen√≠ aktivn√≠ NEBO
    // 2. On u≈æ je aktivn√≠
    return state.activeUser === null || state.activeUser.userId === userId;
  }

  // Z√≠sk√°n√≠ waiting time textu
  getWaitingTime(position: number): string {
    if (position === 0) return 'Aktivn√≠';
    if (position === 1) return 'Dal≈°√≠ na ≈ôadƒõ';
    if (position > 1) return `${position}. v po≈ôad√≠`;
    return 'Nep≈ôipojeno';
  }

  // Vyƒçi≈°tƒõn√≠ neaktivn√≠ch session≈Ø (parametr minutes)
  async cleanupInactiveSessions(minutes: number): Promise<void> {
    const timeoutMs = minutes * 60 * 1000;
    return this.cleanupStaleData(timeoutMs); // OPRAVA: P≈ôedej parametr
  }

  // Vyƒçi≈°tƒõn√≠ star√Ωch session≈Ø (cron job)
  async cleanupStaleData(timeoutMs?: number): Promise<void> {
    try {
      const currentState = await this.getCurrentState();
      if (!currentState) return;

      const now = Date.now();
      const TIMEOUT_MS = timeoutMs || (5 * 60 * 1000); // OPRAVA: Pou≈æij parametr nebo default 5 min
      let hasChanges = false;

      // Vyƒçisti star√©ho aktivn√≠ho u≈æivatele
      if (currentState.activeUser && (now - currentState.activeUser.timestamp) > TIMEOUT_MS) {
        currentState.activeUser = null;
        hasChanges = true;
      }

      // Vyƒçisti star√© rezervace
      const validReservations = currentState.reservationQueue.filter(user => {
        return (now - user.timestamp) <= TIMEOUT_MS;
      });

      if (validReservations.length !== currentState.reservationQueue.length) {
        currentState.reservationQueue = validReservations;
        hasChanges = true;
      }

      if (hasChanges) {
        await this.coordinationDoc.set({
          ...currentState,
          lastActivity: now
        });
        console.log('üîß GateCoordinationService: Star√° data vyƒçi≈°tƒõna');
      }

    } catch (error) {
      console.error('üîß GateCoordinationService: Chyba p≈ôi ƒçi≈°tƒõn√≠ dat:', error);
    }
  }
}

// Export singleton instance
export const gateCoordinationService = new GateCoordinationService();
export default gateCoordinationService;