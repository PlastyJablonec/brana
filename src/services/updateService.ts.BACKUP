export interface UpdateCheckResult {
  hasUpdate: boolean;
  error?: string;
}

class UpdateService {
  private callbacks: ((result: UpdateCheckResult) => void)[] = [];
  private updateAvailable = false;
  private swRegistration: ServiceWorkerRegistration | null = null;

  // NOV√Å IMPLEMENTACE: Service Worker based update detection
  public init(): void {
    if ('serviceWorker' in navigator) {
      console.log('üöÄ UpdateService: Initializing SW-based update detection');
      
      // Naƒçti service worker synchronnƒõ pro vy≈ôe≈°en√≠ chunk probl√©mu
      try {
        // Registrace SW p≈ôesunuta do index.tsx pro vy≈ôe≈°en√≠ bundling probl√©mu
        console.log('üì± UpdateService: SW registration handled in index.tsx');
      } catch (error) {
        console.error('‚ùå UpdateService: SW initialization error:', error);
      }

      // Poslouch√°n√≠ na controller change (po skip waiting)
      navigator.serviceWorker.addEventListener('controllerchange', () => {
        console.log('üîÑ UpdateService: New service worker activated, reloading');
        window.location.reload();
      });
    } else {
      console.warn('‚ö†Ô∏è UpdateService: Service Workers not supported');
    }
  }

  public checkForUpdates(): Promise<UpdateCheckResult> {
    // Jednoduch√° implementace - Service Worker u≈æ detekuje updates automaticky
    return Promise.resolve({ 
      hasUpdate: this.updateAvailable 
    });
  }

  public onUpdateAvailable(callback: (result: UpdateCheckResult) => void): () => void {
    this.callbacks.push(callback);
    
    // Pokud u≈æ je update dostupn√Ω, zavolej callback okam≈æitƒõ
    if (this.updateAvailable) {
      callback({ hasUpdate: true });
    }
    
    // Return unsubscribe function
    return () => {
      this.callbacks = this.callbacks.filter(cb => cb !== callback);
    };
  }

  private notifyCallbacks(result: UpdateCheckResult): void {
    this.callbacks.forEach(callback => {
      try {
        callback(result);
      } catch (error) {
        console.error('‚ùå UpdateService: Error in update callback:', error);
      }
    });
  }

  public async forceRefresh(): Promise<void> {
    try {
      console.log('üîÑ UpdateService: Applying update via Service Worker...');
      
      if (this.swRegistration && this.swRegistration.waiting) {
        // Po≈°li message SW aby aktivoval novou verzi
        this.swRegistration.waiting.postMessage({ type: 'SKIP_WAITING' });
        console.log('‚è≠Ô∏è UpdateService: Skip waiting message sent to SW');
      } else {
        console.log('‚ö° UpdateService: No waiting SW, performing hard reload...');
        window.location.reload();
      }
      
    } catch (error) {
      console.error('‚ùå UpdateService: Force refresh failed:', error);
      // Fallback - obyƒçejn√Ω reload
      window.location.reload();
    }
  }
}

// Export singleton instance
export const updateService = new UpdateService();