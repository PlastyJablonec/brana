// Service Worker pro PWA update detection - dle ZEN MCP doporuƒçen√≠

const CACHE_NAME = 'gate-control-v1';
const urlsToCache = [
  '/',
  '/build-info.json'
  // Statick√© soubory se naƒçtou dynamicky kdy≈æ existuj√≠
];

// Instalace service workeru s error handling
self.addEventListener('install', (event) => {
  console.log('üîß SW: Installing service worker');
  
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('üíæ SW: Caching files');
        
        // KRITICK√Å OPRAVA: Cache files jednotlivƒõ s error handling
        const cachePromises = urlsToCache.map(async (url) => {
          try {
            const response = await fetch(url);
            if (response.ok) {
              return cache.put(url, response);
            } else {
              console.warn(`‚ö†Ô∏è SW: Failed to cache ${url} - status ${response.status}`);
              return null;
            }
          } catch (error) {
            console.error(`‚ùå SW: Error caching ${url}:`, error);
            return null;
          }
        });
        
        // NOV√â: Pokraƒçuj i kdy≈æ nƒõkter√© soubory sel≈æou
        return Promise.allSettled(cachePromises).then(results => {
          const failed = results.filter(r => r.status === 'rejected').length;
          const succeeded = results.filter(r => r.status === 'fulfilled').length;
          console.log(`üíæ SW: Cache results: ${succeeded} succeeded, ${failed} failed`);
          
          // Instalace √∫spƒõ≈°n√° i kdy≈æ nƒõkter√© soubory selhaly
          return Promise.resolve();
        });
      })
      .catch(error => {
        console.error('‚ùå SW: Cache installation failed:', error);
        // Pokraƒçuj i p≈ôi selh√°n√≠ cache - service worker funguje bez cache
        return Promise.resolve();
      })
  );
  
  // Force nov√Ω service worker do waiting state
  self.skipWaiting();
});

// Aktivace service workeru
self.addEventListener('activate', (event) => {
  console.log('‚úÖ SW: Activating service worker');
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('üóëÔ∏è SW: Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  
  // P≈ôevz√≠t kontrolu nad v≈°emi klienty
  return self.clients.claim();
});

// Fetch event handler
self.addEventListener('fetch', (event) => {
  // S√≠≈• ‚Üí cache strategie pro navigace (HTML) kv≈Øli ƒçerstv√©mu indexu
  if (event.request.mode === 'navigate') {
    event.respondWith((async () => {
      try {
        const networkResponse = await fetch(event.request, {
          cache: 'no-store',
          headers: {
            'Cache-Control': 'no-store'
          }
        });

        // Aktualizuj cache pro offline fallback, ale ignoruj chyby
        caches.open(CACHE_NAME).then((cache) => {
          cache.put(event.request, networkResponse.clone()).catch(() => {});
        }).catch(() => {});

        return networkResponse;
      } catch (error) {
        const cachedResponse = await caches.match(event.request);
        if (cachedResponse) {
          return cachedResponse;
        }
        return caches.match('/');
      }
    })());
    return;
  }

  // Speci√°ln√≠ handling pro build-info.json - v≈ædy fresh
  if (event.request.url.includes('build-info.json')) {
    event.respondWith(
      fetch(event.request, { 
        cache: 'no-cache',
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate'
        }
      }).catch(() => {
        return caches.match(event.request);
      })
    );
    return;
  }

  // Standardn√≠ cache-first strategy pro ostatn√≠ soubory
  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        if (response) {
          return response;
        }

        // OPRAVA: Pro unknown routes (ty s ?t=timestamp), zkus fetch s graceful fallback
        return fetch(event.request).catch((error) => {
          console.log('‚ö†Ô∏è SW: Fetch failed for:', event.request.url);

          // Pro query stringy s cache busting (?t=timestamp), ignoruj chybu
          if (event.request.url.includes('?t=') || event.request.url.includes('cache=')) {
            console.log('üîÑ SW: Cache busting request failed, ignoring');
            return new Response('{}', {
              status: 200,
              headers: { 'Content-Type': 'application/json' }
            });
          }

          // Pro ostatn√≠ routes, vyhoƒè error m√≠sto 503
          throw error;
        });
      })
  );
});

// Message handler pro skip waiting
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('‚è≠Ô∏è SW: Skipping waiting, activating new version');
    self.skipWaiting();
  }
});
